{"version":3,"sources":["components/QuestionCard.styles.ts","API.ts","components/QuestionCard.tsx","images/background.jpg","App.style.ts","App.tsx","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","response","json","data","console","log","results","incorrect_answers","correct_answer","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","e","currentTarget","prev","AnswerObject","undefined","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"q6BAGO,ICaKA,EDbCC,EAAUC,IAAOC,IAAV,KAmBPC,EAAgBF,IAAOC,IAAV,KAcR,gBAAGE,EAAH,EAAGA,QAASC,EAAZ,EAAYA,YAAZ,OACVD,EACM,WACCA,GAAWC,EACR,UACA,aEUHC,EAnCuB,SAAC,GAMZ,IALvBC,EAKsB,EALtBA,SACAC,EAIsB,EAJtBA,QACAC,EAGsB,EAHtBA,SACAC,EAEsB,EAFtBA,WACAC,EACsB,EADtBA,WACAC,EAAsB,EAAtBA,eACA,OACI,mCACI,eAACZ,EAAD,WACI,oBAAGa,UAAU,SAAb,sBACcF,EADd,IAC2BC,KAE3B,mBAAGE,wBAAyB,CAAEC,OAAQR,KACtC,8BACKC,EAAQQ,KAAI,SAACC,GAAD,OACT,cAACd,EAAD,CAEIC,SAAmB,OAAVM,QAAU,IAAVA,OAAA,EAAAA,EAAYQ,iBAAkBD,EACvCZ,aAAuB,OAAVK,QAAU,IAAVA,OAAA,EAAAA,EAAYO,UAAWA,EAHxC,SAKI,wBAEIE,WAAYT,EAAYU,MAAOH,EAC/BI,QAASZ,EAHb,SAII,sBAAMK,wBAAyB,CAAEC,OAAQE,QAR5CA,c,kBDjBjBlB,K,YAAAA,E,gBAAAA,E,aAAAA,M,KAML,IAAMuB,EAAkB,uCAAG,WAAMC,EAAcC,GAApB,mBAAAC,EAAA,6DACxBC,EADwB,6CACyBH,EADzB,uBAC8CC,EAD9C,yBAGPG,MAAMD,GAHC,cAGxBE,EAHwB,gBAIXA,EAASC,OAJE,cAIxBC,EAJwB,OAK9BC,QAAQC,IAAI,OAAOF,GALW,kBAQ3BA,EAAKG,QAAQjB,KAAI,SAACT,GAAD,mBAAC,eAEdA,GAFa,IAIhBC,QAAQ,GAAD,mBAAKD,EAAS2B,mBAAd,CAAgC3B,EAAS4B,uBAZtB,2CAAH,wDEtBhB,MAA0B,uC,uvCCGlC,IAAMC,EAAcC,YAAH,IAMGC,GAedtC,EAAUC,IAAOC,IAAV,KCiELqC,EA5EH,WAAO,IAAD,EACcC,oBAAS,GADvB,mBACTC,EADS,KACAC,EADA,OAEkBF,mBAA0B,IAF5C,mBAETG,EAFS,KAEEC,EAFF,OAGYJ,mBAAS,GAHrB,mBAGTK,EAHS,KAGDC,EAHC,OAIsBN,mBAAyB,IAJ/C,mBAITO,EAJS,KAIIC,EAJJ,OAKUR,mBAAS,GALnB,mBAKTS,EALS,KAKFC,EALE,OAMgBV,oBAAS,GANzB,mBAMTW,EANS,KAMCC,EAND,KAQhBrB,QAAQC,IAAI,YAAaW,GAEzB,IAAMU,EAAW,uCAAG,4BAAA5B,EAAA,6DAClBiB,GAAW,GACXU,GAAY,GAFM,SAIS9B,EAfP,GAe2CvB,EAAWuD,MAJxD,OAIZC,EAJY,OAKlBX,EAAaW,GACbL,EAAS,GACTF,EAAe,IACfF,EAAU,GACVJ,GAAW,GATO,4CAAH,qDAoCjB,OACE,qCACA,cAACN,EAAD,IACA,eAAC,EAAD,CAASvB,UAAU,MAAnB,UACE,4CACCsC,GApDiB,KAoDLJ,EAAYS,OAA8B,wBAAQ3C,UAAU,QAAQQ,QAASgC,EAAnC,mBACnD,KACDtB,QAAQC,IAAI,mBAAoBW,EAAUE,IAC/CM,EAAsD,KAA1C,oBAAGtC,UAAU,QAAb,mBAA4BoC,KACrCR,EAAW,iDAA2B,MACrCA,IAAYU,GACZ,cAAC,EAAD,CACE5C,SAAUoC,EAAUE,GAAQtC,SAC5BC,QAASmC,EAAUE,GAAQrC,QAAUmC,EAAUE,GAAQrC,QAAU,GACjEC,SAtCY,SAACgD,GACnB1B,QAAQC,IAAIyB,EAAEC,cAActC,OAC5B,IAAMH,EAASwC,EAAEC,cAActC,MACzBhB,EAAUuC,EAAUE,GAAQV,iBAAmBlB,EAClDb,GAAS8C,GAAS,SAAAS,GAAI,OAAIA,EAAO,KACpC,IAAMC,EAAe,CACnBrD,SAASoC,EAAUE,GAAQtC,SAC3BU,SACAb,UACAc,cAAcyB,EAAUE,GAAQV,gBAElCa,GAAe,SAAAW,GAAI,4BAAMA,GAAN,CAAWC,QA4BxBlD,WAAYqC,EAAcA,EAAYF,QAAUgB,EAChDlD,WAAYkC,EAAS,EACrBjC,eAhEc,MAmEnBuC,IAAaV,GAAWM,EAAYS,SAAWX,EAAS,GAAgBiB,IAAXjB,GAC3D,wBAAQhC,UAAU,OAAOQ,QA9BT,WACnB,IAAM0C,EAAelB,EAAS,EAvCV,KAwCjBkB,EACDX,GAAY,GAEZN,EAAUiB,IAyBT,yBC5EPC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.40d618d3.chunk.js","sourcesContent":["import styled from 'styled-components';\n\n\nexport const Wrapper = styled.div`\nmax-width:1100px;\nbackground-color:rgba(255,255,255,0.75);\nborder-radius:10px;\nborder:3px solid #33272A;\npadding:20px;\nbox-shadow:0px 5px 10px rgba(0,0,0,0.25);\ntext-align:center;\n\np{\n    font-size:1rem\n}\n`\n\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n}\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n    transition:all 0.3s ease;\n    \n    :hover{\n        opacity:0.8\n    }\n    \n button {\n     cursor:pointer;\n     user-select:none;\n     font-size:0.8rem;\n     width:100%;\n     height:40px;\n     margin: 5px 0;\n     background:${({ correct, userClicked }) =>\n        correct\n            ? '#56ffa4'\n            : !correct && userClicked\n                ? '#ff5656'\n                : '#F9C5C7'\n\n    };\n     border:3px solid #33272A;\nbox-shadow:1px 2px 0px rgba(0,0,0,0.1);\ntext-align:center;\n }   \n \n\n`","import {shuffleArray} from './util';\n\n\n//defined the type based on the API's return\nexport type Question = {\n    category:string,\n    type:string,\n    difficulty:string,\n    question:string,\n    correct_answer:string,\n    incorrect_answers:string[]\n}\n\n//setting the type to have both corecct_answer and incorrect_answer in one array\nexport type QuestionState = Question & {answers:string[]}\n\nexport enum Difficulty {\n    EASY =\"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\"\n}\n\nexport const fetchQuizQuestions = async(amount:number,difficulty:Difficulty)=>{\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&category=27`\n    // const data ＝　await(await fetch(endpoint)).json();\n    const response = await fetch(endpoint)\n    const data = await response.json()\n    console.log(\"data\",data)\n    \n    //put answers in one array\nreturn data.results.map((question:Question)=>(\n    {\n        ...question,\n        // answers:shuffleArray([...question.incorrect_answers,question.correct_answer])\n        answers:[...question.incorrect_answers,question.correct_answer]\n    })\n    \n)\n\n\n}","import React from 'react'\n//types\nimport { AnswerObject } from '../App'\n\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles'\n\ntype Props = {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void; //void: it doesn't have return. \n    userAnswer: AnswerObject | undefined;\n    questionNr: number;\n    totalQuestions: number;\n}\n\n//If we want to specify props, we do that inside of angle brackets\nconst QuestionCard: React.FC<Props> = ({\n    question,\n    answers,\n    callback,\n    userAnswer,\n    questionNr,\n    totalQuestions, }) => {\n    return (\n        <>\n            <Wrapper>\n                <p className=\"number\">\n                    Question:{questionNr}/{totalQuestions}\n                </p>\n                <p dangerouslySetInnerHTML={{ __html: question }}></p>\n                <div>\n                    {answers.map((answer) => (\n                        <ButtonWrapper\n                        key={answer}\n                            correct={userAnswer?.correctAnswer === answer}\n                            userClicked={userAnswer?.answer === answer}\n                        >\n                            <button \n\n                                disabled={!!userAnswer} value={answer}\n                                onClick={callback}>\n                                <span dangerouslySetInnerHTML={{ __html: answer }}></span>\n                            </button>\n                        </ButtonWrapper>\n                    ))}\n                </div>\n            </Wrapper>\n        </>\n    )\n}\n\nexport default QuestionCard","export default __webpack_public_path__ + \"static/media/background.c685faad.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\nimport BGImage from './images/background.jpg';\n\nexport const GlobalStyle = createGlobalStyle `\nhtml {\n    height:100%\n}\n\nbody{\n    background-image:url(${BGImage});\n    background-size:cover;\n    margin:0;\n    padding:0 20px;\n    display:flex;\n    justify-content:center;\n    font-family: 'Barlow Condensed', sans-serif;\n    color:#33272A;\n}\n\n*{\n    box-sizing:border-box;\n    \n}\n`\nexport const Wrapper = styled.div`\ndisplay:flex;\nflex-direction:column;\nalign-items:center\n\n>p{\n    color:#fff;\n}\n\n.number {\n    font-weight:bold;\n    font-size:30px,\n}\n.score{\n    color:#fff;\n    font-size:2em;\n    margin:0;\n}\n\nh1{\n    font-family:'Henny Penny', cursive;;\n  background-image: linear-gradient(180deg, #fff,#56ffa4);\n  background-size:100%;\n  background-clip:text;\n  -webkit-background-clip:text;\n  -webkit-text-fill-color:transparent;\n  -moz-background-clip:text;\n  -moz-text-fill-color:transparent;\n  filter:drop-shadow(2px 2px #0085a3);\n  font-size:70px;\n  text-align:center;\n  margin:20px\n}\n\n.start, .next{\n    cursor:pointer;\n    background:linear-gradient(180deg, #fff,#ffcc91);\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\n    border-radius:10px;\n    height:40px;\n    margin:20px 0;\n    padding:0;\n}\n`","import React, { useState } from 'react';\nimport QuesionCard from './components/QuestionCard'\nimport { fetchQuizQuestions, Difficulty, QuestionState } from './API'\nimport {GlobalStyle,Wrapper} from './App.style'\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string\n}\n\nconst TOTAL_QUESTIONS = 10;\nconst App = () => {\n  const [loading, setLoading] = useState(false)\n  const [questions, setQuestions] = useState<QuestionState[]>([])\n  const [number, setNumber] = useState(0)\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([])\n  const [score, setScore] = useState(0)\n  const [gameOver, setGameOver] = useState(true)\n\n  console.log(\"questions\", questions)\n\n  const startTrivia = async () => {\n    setLoading(true)\n    setGameOver(false)\n\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY)\n    setQuestions(newQuestions)\n    setScore(0)\n    setUserAnswers([])\n    setNumber(0)\n    setLoading(false)\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    console.log(e.currentTarget.value)\n    const answer = e.currentTarget.value\n    const correct = questions[number].correct_answer === answer\n    if(correct) setScore(prev => prev + 1)\n    const AnswerObject = {\n      question:questions[number].question,\n      answer,\n      correct,\n      correctAnswer:questions[number].correct_answer\n    }\n    setUserAnswers(prev=>[...prev,AnswerObject ])\n\n  }\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n    if(nextQuestion === TOTAL_QUESTIONS){\n      setGameOver(true)\n    }else{\n      setNumber(nextQuestion)\n    }\n  }\n\n  return (\n    <>\n    <GlobalStyle/>\n    <Wrapper className=\"App\">\n      <h1>REACT QUIZ</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (<button className=\"start\" onClick={startTrivia}>START</button>)\n        : null}\n      {  console.log(\"questions answer\", questions[number])}\n  {!gameOver ? (<p className=\"score\">Score:{score}</p>) : null}\n      {loading ? (<p>Lading Questions</p>) : null}\n      {!loading && !gameOver && (\n        <QuesionCard\n          question={questions[number].question}\n          answers={questions[number].answers ? questions[number].answers : []}\n          callback={checkAnswer}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          questionNr={number + 1}\n          totalQuestions={TOTAL_QUESTIONS} />\n      )}\n  {\n    !gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS-1 &&(\n       <button className=\"next\" onClick={nextQuestion}>NEXT</button>\n\n    )\n  }\n         </Wrapper>\n         </>\n  );\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}